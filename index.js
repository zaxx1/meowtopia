const cron = require('node-cron'); const express = require('express'); const { configDotenv } = require('dotenv'); const { validateToken } = require('./func/CheckValidToken'); const { buyPlant } = require('./func/buyPlant'); const { farmPlant } = require('./func/farmPlant'); const { claimMission } = require('./func/ClaimMission'); const { upgradeAnimal } = require('./func/upgrade'); const fs = require('fs'); const readline = require('readline'); const path = require('path'); configDotenv(); const configPath = path.join(__dirname, 'config.json'); const readConfig = () => { if (!fs.existsSync(configPath)) { fs.writeFileSync(configPath, JSON.stringify({ tokens: [] }, null, 2)); } return JSON.parse(fs.readFileSync(configPath, 'utf8')); }; const writeConfig = (data) => { fs.writeFileSync(configPath, JSON.stringify(data, null, 2)); }; const addToken = (name, token) => { const config = readConfig(); config.tokens.push({ name, token }); writeConfig(config); }; const removeToken = (name) => { const config = readConfig(); config.tokens = config.tokens.filter(t => t.name !== name); writeConfig(config); }; const listTokens = () => { const config = readConfig(); if (config.tokens.length === 0) { console.log('Token List is Empty'); return []; } config.tokens.forEach((t, index) => { console.log(`${index + 1}. ${t.name}`); }); return config.tokens; }; const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); const showMenu = () => { console.log('Please select an option:'); console.log('1. Start Bot'); console.log('2. Add Token'); console.log('3. Remove Token'); rl.question('Enter your choice: ', (choice) => { switch (choice) { case '1': console.log('Starting bot...'); startBot(); break; case '2': rl.question('Enter the token name: ', (name) => { rl.question('Enter the token: ', (token) => { addToken(name, token); console.log('Token added successfully.'); showMenu(); }); }); break; case '3': const tokens = listTokens(); if (tokens.length > 0) { rl.question('Enter the number of the token to remove: ', (number) => { const index = parseInt(number, 10) - 1; if (index >= 0 && index < tokens.length) { const tokenToRemove = tokens[index]; removeToken(tokenToRemove.name); console.log('Token removed successfully.'); } else { console.log('Invalid number. Please try again.'); } showMenu(); }); } else { showMenu(); } break; default: console.log('Invalid option. Please try again.'); showMenu(); break; } }); }; const port = process.env.PORT || 103; const app = express(); app.get('/', (req, res) => { res.send('API cron job server is running'); }); app.listen(port, async () => { console.log(`Server running on port ${port}`); showMenu(); }); const startBot = () => { farmPlant(); cron.schedule("*/12 * * * *", farmPlant); cron.schedule("0 * * * *", claimMission); cron.schedule("0 * * * *", upgradeAnimal); };
